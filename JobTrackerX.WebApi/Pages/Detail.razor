@page "/{JobId:long}"
@inject IJobTrackerService _service
@inject IMapper _mapper
@inject IToastService _toastService

@if (_jobEntity == null)
{
    if (!_isJobExist)
    {
        <p class="h2 text-center bg-danger">
            <em>JobNotExist：@JobId</em>
        </p>
    }
    else
    {
        <p class="h2 text-center bg-light">
            Loading：@JobId
        </p>
    }
}
else
{
    <div class="container" style="max-width: 1440px; margin: 0 auto;}">
        <p class="h2">JobDetail</p>
        <br />
        <table class="table text-left">
            <tbody>
                <tr>
                    <td>@nameof(_jobEntity.JobId): </td>
                    <td class="font-weight-bold">@_jobEntity.JobId</td>
                </tr>
                <tr>
                    <td>@nameof(_jobEntity.ParentJobId): </td>
                    <td>
                        @if (_jobEntity.ParentJobId.HasValue)
                        {
                            <NavLink href="@_jobEntity.ParentJobPath">@(_jobEntity.ParentJobId.Value.ToString())</NavLink>
                        }
                        else
                        {
                            <span>@Constants.NotAvailableStr</span>
                        }
                    </td>
                </tr>
                <tr>
                    <td>@nameof(_jobEntity.AncestorJobId): </td>
                    <td>
                        <NavLink href="@_jobEntity.AncestorJobPath">@_jobEntity.AncestorJobId</NavLink>
                    </td>
                </tr>
                <tr>
                    <td>@nameof(_jobEntity.JobName): </td>
                    <td>@_jobEntity.JobName</td>
                </tr>
                <tr>
                    <td>@nameof(_jobEntity.StartTime): </td>
                    <td>@(_jobEntity.StartTime.HasValue ? _jobEntity.StartTime.Value.ToOffset(TimeSpan.FromHours(8)).DateTime.ToString(Constants.WebUIShowDateTimeFormat) : Constants.NotAvailableStr)</td>
                </tr>
                <tr>
                    <td>@nameof(_jobEntity.EndTime): </td>
                    <td>@(_jobEntity.EndTime.HasValue ? _jobEntity.EndTime.Value.ToOffset(TimeSpan.FromHours(8)).DateTime.ToString(Constants.WebUIShowDateTimeFormat) : Constants.NotAvailableStr)</td>
                </tr>
                <tr>
                    <td>ExecutionTime: </td>
                    <td>@(GetTimeSpanStr(_jobEntity.StartTime, _jobEntity.EndTime))</td>
                </tr>
                <tr>
                    <td>@nameof(_jobEntity.CurrentJobState): </td>
                    <td>
                        <span class="@(Helper.GetStateBadgeColor(_jobEntity.CurrentJobState))">@(_jobEntity.CurrentJobState)</span>
                    </td>
                </tr>
                @if (_jobEntity.TotalChildrenCount > 0)
                {
                    <tr>
                        <td>ChildrenProgress: </td>
                        <td>
                            <div class="badge badge-pill badge-success">Success: @_jobEntity.SuccessChildrenCount</div>
                            <div class="badge badge-pill badge-danger">Failed: @_jobEntity.FailedChildrenCount</div>
                            <div class="badge badge-pill badge-info">Total: @_jobEntity.TotalChildrenCount</div>
                            <div class="badge badge-pill badge-secondary">Pending: @_jobEntity.PendingChildrenCount</div>
                            <br />
                            <div class="progress" style="max-width:300px">
                                <div class="progress-bar @(_jobEntity.FailedChildrenCount>0?" bg-danger":"bg-success")"
                                     role="progressbar"
                                     style="width:@(((_jobEntity.TotalChildrenCount-_jobEntity.PendingChildrenCount)/(_jobEntity.TotalChildrenCount*1.0)).ToString(Constants.PercentageFormat))"></div>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>No Children</td>
                        <td></td>
                    </tr>
                }
                <tr>
                    <td>@nameof(_jobEntity.Options): </td>
                    <td>
                        <p>@_jobEntity.Options</p>
                    </td>
                </tr>
                <tr>
                    <td>Tags : </td>
                    <td>
                        @if (_jobEntity.Tags?.Any() == true)
                        {
                            foreach (var tag in _jobEntity.Tags)
                            {
                                <span class="@Constants.TagClassStr">@tag</span>
                            }
                        }
                    </td>
                </tr>

            </tbody>
        </table>
        <br />
        <hr />
    </div>
    @if (ChildrenInternal?.Any() == true)
    {
        <div class="container" style="max-width: 4096px; margin: 0 auto;}">
            <div>
                <p class="h2">Children</p>
                <span class="small">Count: @totalCount</span>
                <div class="form-group float-right">
                    <select @onchange="@(e=>ApplyQueryByStatusAsync(e))" class="form-control">
                        <option class="text-white-50" value="-1">@Constants.NotAvailableStr</option>
                        <option class="text-primary" value="@((int)JobState.WaitingToRun)">@nameof(JobState.WaitingToRun)</option>
                        <option class="text-danger" value="@((int)JobState.Faulted)">@nameof(JobState.Faulted)</option>
                        <option class="text-success" value="@((int)JobState.RanToCompletion)">@nameof(JobState.RanToCompletion)</option>
                        <option class="text-info" value="@((int)JobState.Running)">@nameof(JobState.Running)</option>
                        <option class="text-secondary" value="@((int)JobState.WaitingForChildrenToComplete)">@nameof(JobState.WaitingForChildrenToComplete)</option>
                    </select>
                </div>
            </div>
            <div class="table-responsive-md text-center">
                <table class="table table-striped table-sm table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th>JobId</th>
                            <th>JobName</th>
                            <th>JobStatus</th>
                            <th>CreateTime</th>
                            <th>StartTime</th>
                            <th>EndTime</th>
                            <th>ExecutionTime</th>
                            <th>Tags</th>
                            <th>CreatedBy</th>
                            @if (Children.Any(s => s.TotalChildrenCount > 0))
                            {
                                <th>
                                    ChildrenProgress
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var child in Children)
                        {
                            <tr>
                                <td>
                                    <NavLink href="@child.DetailPath">@child.JobId</NavLink>
                                </td>
                                <td>@child.JobName</td>
                                <td>
                                    <span class="@(Helper.GetStateBadgeColor(child.CurrentJobState))">
                                        @child.CurrentJobState
                                    </span>
                                </td>
                                <td>@(child.CreateTime?.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUIShowDateTimeFormat) ?? Constants.NotAvailableStr)</td>
                                <td>@(child.StartTime?.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUIShowDateTimeFormat) ?? Constants.NotAvailableStr)</td>
                                <td>@(child.EndTime?.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUIShowDateTimeFormat) ?? Constants.NotAvailableStr)</td>
                                <td>@(GetTimeSpanStr(child.StartTime, child.EndTime))</td>
                                <td>
                                    @if (child.Tags?.Any() == true)
                                    {
                                        foreach (var tag in child.Tags)
                                        {
                                            <span class="badge badge-dark badge-pill">@tag</span>
                                        }
                                    }
                                </td>
                                <td>@child.CreateBy</td>
                                @if (child.TotalChildrenCount > 0)
                                {
                                    <td>
                                        <div class="progress" style="max-width:300px">
                                            <div class="progress-bar @(_jobEntity.FailedChildrenCount>0?" bg-danger":"bg-success")"
                                                 role="progressbar"
                                                 style="width:@(((child.TotalChildrenCount-child.PendingChildrenCount)/(child.TotalChildrenCount*1.0)).ToString(Constants.PercentageFormat))"></div>
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div>
                <div class="float-left">
                    <span>Set page size:</span>
                    <input type="text" style="max-width:50px" @bind-value="@setPageSize" @onblur="@(e=>RefreshByPageSizeAsync())" />
                </div>
                <div class="float-right">
                    <select class="custom-select" @onchange="@(e=>GoToPageNumberAsync(e))">
                        @for (int i = 1; i <= MaxPageNumber; i++)
                        {
                            if (pageNumber == i)
                            {
                                <option value="@i" selected="selected">@i</option>
                            }
                            else
                            {
                                <option value="@i">@i</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
    }
}

@code{
    [Parameter]
    public long JobId { get; set; }
    private int MaxPageNumber { get { return (int)Math.Ceiling((totalCount * 1.0) / pageSize); } }
    private int pageSize = 10;
    private int setPageSize = 10;
    private int pageNumber = 1;
    private int totalCount = 0;
    private int JobStateFilter = -1;
    private IEnumerable<JobEntityViewModel>
    Children;
    private List<JobEntityViewModel>
        ChildrenInternal = new List<JobEntityViewModel>();
    private JobEntityViewModel _jobEntity;
    private bool _isJobExist = true;

    private string GetTimeSpanStr(DateTimeOffset? start, DateTimeOffset? end)
    {
        if (!start.HasValue)
        {
            return Constants.NotAvailableStr;
        }
        if (!end.HasValue)
        {
            end = DateTimeOffset.Now;
        }
        return GetTimeSpanStr((end - start).Value);
    }

    private string GetTimeSpanStr(TimeSpan? ts)
    {
        if (!ts.HasValue)
        {
            return Constants.NotAvailableStr;
        }
        if (ts.Value.TotalDays >= 1)
        {
            return ts.Value.ToString("d'd 'h'h 'm'm 's's'");
        }
        if (ts.Value.TotalHours >= 1)
        {
            return ts.Value.ToString("h'h 'm'm 's's'");
        }
        if (ts.Value.TotalMinutes >= 1)
        {
            return ts.Value.ToString("m'm 's's'");
        }
        if (ts.Value.TotalSeconds >= 1)
        {
            return ts.Value.ToString("s's'");
        }
        return $"{ts.Value.TotalSeconds.ToString(Constants.DecimalFormat)}s";
    }

    private async Task LoadJobEntityAsync()
    {
        try
        {
            _jobEntity = _mapper.Map<JobEntityViewModel>(await _service.GetJobByIdAsync(JobId));
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message, "LoadDetailError");
        }

    }

    private async Task LoadJobChildrenAsync(bool force = false)
    {
        try
        {
            if (force || ChildrenInternal?.Any() != true)
            {
                ChildrenInternal = _mapper.Map<List<JobEntityViewModel>>((await _service.GetChildrenEntitiesAsync(JobId)).Where(s => s.JobId != JobId).OrderBy(s => s.JobId));
            }
            var skip = pageSize * (pageNumber - 1);

            if (JobStateFilter < 0)
            {
                totalCount = ChildrenInternal.Count;
                Children = ChildrenInternal.Skip(skip).Take(pageSize);
            }
            else
            {
                var status = (JobState)JobStateFilter;
                var targetCollection = ChildrenInternal.Where(s => s.CurrentJobState == status).ToList();
                totalCount = targetCollection.Count;
                Children = targetCollection.Skip(skip).Take(pageSize);
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message, "LoadChildrenError");
        }
    }

    private async Task ApplyQueryByStatusAsync(ChangeEventArgs e)
    {
        var val = int.Parse(e.Value.ToString());
        JobStateFilter = val;
        await LoadJobChildrenAsync();
    }

    private async Task GoToPageNumberAsync(ChangeEventArgs e)
    {
        pageNumber = int.Parse(e.Value.ToString());
        await LoadJobChildrenAsync();
    }

    private async Task RefreshByPageSizeAsync()
    {
        if (setPageSize == pageSize)
        {
            return;
        }
        pageSize = setPageSize;
        pageNumber = 1;
        await LoadJobChildrenAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadJobEntityAsync();
        await LoadJobChildrenAsync(true);
    }
}